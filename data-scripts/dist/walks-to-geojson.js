"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const assert = require("assert");
const util_1 = require("util");
const minimist = require("minimist");
const args = minimist(process.argv.slice(2));
const { _: [inFile, outFile], boundary: boundingString } = args;
const boundary = [];
if (boundingString) {
    try {
        const parsed = JSON.parse(boundingString);
        boundary.push(...parsed);
    }
    catch (e) { }
    assert.equal(boundary.length, 2, "Invalid bounding argument");
}
assert.ok(inFile, "Missing input file argument");
assert.ok(outFile, "Missing output file argument");
const asyncReadFile = util_1.promisify(fs.readFile);
const asyncWriteFile = util_1.promisify(fs.writeFile);
const main = async () => {
    const inJSON = await asyncReadFile(inFile, "utf8");
    const walks = JSON.parse(inJSON);
    const feature = {
        type: "Feature",
        properties: {
            type: "walk"
        },
        geometry: {
            type: "MultiLineString",
            coordinates: walks
                .filter(walk => walk.points)
                .filter(walk => (!boundary.length ||
                walk.points.every(tuple => tuple.every((a, i) => (a > boundary[0][i] &&
                    a < boundary[1][i])))))
                .map(walk => walk.points)
        }
    };
    const geojson = {
        "type": "FeatureCollection",
        features: [feature]
    };
    const outJSON = JSON.stringify(geojson, null, "\t");
    await asyncWriteFile(outFile, outJSON);
};
main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fsa3MtdG8tZ2VvanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93YWxrcy10by1nZW9qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBRXpCLGlDQUFpQztBQUNqQywrQkFBK0I7QUFFL0IscUNBQXFDO0FBR3JDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLE1BQU0sRUFBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBQyxHQUFHLElBQUksQ0FBQztBQUM5RCxNQUFNLFFBQVEsR0FBZSxFQUFFLENBQUM7QUFFaEMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUM7UUFDSixNQUFNLE1BQU0sR0FBeUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVoRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO0lBRWQsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLDhCQUE4QixDQUFDLENBQUM7QUFFbkQsTUFBTSxhQUFhLEdBQUcsZ0JBQVMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0MsTUFBTSxjQUFjLEdBQUcsZ0JBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFPL0MsTUFBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDdkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRW5ELE1BQU0sS0FBSyxHQUEyQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpELE1BQU0sT0FBTyxHQUFHO1FBQ2YsSUFBSSxFQUFFLFNBQVM7UUFDZixVQUFVLEVBQUU7WUFDWCxJQUFJLEVBQUUsTUFBTTtTQUNaO1FBQ0QsUUFBUSxFQUFFO1lBQ1QsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixXQUFXLEVBQW9CLEtBQUs7aUJBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7aUJBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQ2YsQ0FBQyxRQUFRLENBQUMsTUFBTTtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDaEQsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2xCLENBQUMsQ0FBQyxDQUNILENBQUM7aUJBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN6QjtLQUNELENBQUM7SUFFRixNQUFNLE9BQU8sR0FBWTtRQUN4QixNQUFNLEVBQUUsbUJBQW1CO1FBQzNCLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQztLQUNuQixDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXBELE1BQU0sY0FBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUM7QUFFRixJQUFJLEVBQUUsQ0FBQyJ9