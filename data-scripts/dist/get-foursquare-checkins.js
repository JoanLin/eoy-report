"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const assert = require("assert");
const minimist = require("minimist");
const Foursquare = require("node-foursquare");
const { _: [outFile], c: configPath, year: yearString } = minimist(process.argv.slice(2));
assert(outFile, "output file not specified");
assert(configPath, "config not specified");
const year = parseInt(yearString, 10);
assert.equal(typeof year, "number");
assert(Number.isFinite(year));
const configRaw = fs.readFileSync(configPath, "utf8");
const config = JSON.parse(configRaw);
const foursquare = Foursquare(config);
const asyncGetCheckins = (opts) => new Promise((resolve, reject) => {
    foursquare.Users.getCheckins(null, opts, config.secrets.accessToken, (err, data) => {
        if (err) {
            return reject(err);
        }
        resolve(data);
    });
});
const getCheckinsForYear = async () => {
    const firstDateInYear = new Date(year, 0, 1, 0, 0, 0, 0); //Jan 1, <year>
    const lastDateInYear = new Date(year, 11, 31, 23, 59, 59);
    const limit = 250; //maximum;
    let offset = 0;
    let isDone = false;
    const checkins = [];
    const formatCheckinVenue = (checkin) => ({
        venue_id: checkin.venue.id,
        venue_name: checkin.venue.name,
        venue_categories: checkin.venue.categories.map(cat => cat.name),
        date: new Date(checkin.createdAt * 1000),
        venue_location: {
            lng: checkin.venue.location.lng,
            lat: checkin.venue.location.lat
        },
        venue_cc: checkin.venue.location.cc,
        venue_city: checkin.venue.location.city,
        venue_state: checkin.venue.location.state,
        with: checkin.with ? checkin.with.map(w => w.firstName) : undefined
    });
    while (!isDone) {
        const data = await asyncGetCheckins({
            limit,
            offset,
            sort: "newestfirst",
            beforeTimestamp: lastDateInYear.getTime() / 1000
        });
        const theseCheckins = data.checkins.items
            .map(formatCheckinVenue)
            .filter(checkin => checkin.date <= lastDateInYear && checkin.date >= firstDateInYear);
        console.log(`got ${theseCheckins.length} checkins. offset is ${offset}`);
        offset += limit;
        checkins.push(...theseCheckins);
        if (theseCheckins.length < limit) {
            isDone = true;
        }
    }
    checkins.sort(({ date: a }, { date: b }) => a.getTime() - b.getTime());
    fs.writeFileSync(outFile, JSON.stringify(checkins, null, "\t"));
};
getCheckinsForYear();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZvdXJzcXVhcmUtY2hlY2tpbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0LWZvdXJzcXVhcmUtY2hlY2tpbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUdiLHlCQUF5QjtBQUN6QixpQ0FBaUM7QUFDakMscUNBQXFDO0FBR3JDLDhDQUE4QztBQUU5QyxNQUFNLEVBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFeEYsTUFBTSxDQUFDLE9BQU8sRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztBQUUzQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUU5QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQW1CdEMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQXFCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO0lBQ3RGLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FB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